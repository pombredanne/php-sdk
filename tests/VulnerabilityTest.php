<?php
/**
 * VulnDB PHP SDK
 *
 * @copyright 2015 Anthon Pang
 *
 * @license http://opensource.org/licenses/MIT MIT
 */

namespace VulnDb\Tests;

use VulnDb\Vulnerability;

class VulnerabilityTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @group unit
     */
    public function testConstructorWithRequiredData()
    {
        $data = array(
            'id' => 1,
            'title' => 'MyTitle',
            'description' => array('Description'),
            'severity' => 'high',
            'fix' => array(
                'effort' => 10,
                'guidance' => array('Guidance'),
            ),
            'filename' => 'Filename',
        );

        $obj = new Vulnerability($data);

        $this->assertEquals($data['id'], $obj->id);
        $this->assertEquals($data['title'], $obj->title);
        $this->assertEquals($data['severity'], $obj->severity);
        $this->assertEquals('(' . $data['fix']['effort'] . ') ' . $data['fix']['guidance'][0], (string) $obj->fix);
        $this->assertEquals($data['filename'], $obj->filename);
        $this->assertEquals(array(), $obj->cwe);
        $this->assertEquals(array(), $obj->owaspTop10);
        $this->assertEquals(array(), $obj->wasc);
        $this->assertEquals(array(), $obj->tags);
        $this->assertEquals(array(), $obj->references);
    }

    /**
     * @group unit
     */
    public function testConstructorWithOptionalData()
    {
        $data = array(
            'id' => 1,
            'title' => 'MyTitle',
            'description' => array('Description'),
            'severity' => 'high',
            'fix' => array(
                'effort' => 10,
                'guidance' => array('Guidance'),
            ),
            'cwe' => array(100),
            'owasp_top_10' => array("2013" => array(25)),
            'wasc' => array(42),
            'tags' => array('dom'),
            'references' => array(
                array(
                    'title' => 'ReferenceTitle',
                    'url' => 'http://example/',
                ),
            ),
            'filename' => 'Filename',
        );

        $obj = new Vulnerability($data);

        $this->assertEquals($data['id'], $obj->id);
        $this->assertEquals($data['title'], $obj->title);
        $this->assertEquals($data['severity'], $obj->severity);
        $this->assertEquals(
            '(' . $data['fix']['effort'] . ') ' . $data['fix']['guidance'][0],
            (string) $obj->fix
        );
        $this->assertEquals($data['filename'], $obj->filename);
        $this->assertEquals(array($data['cwe'][0]), $obj->cwe);
        $this->assertEquals($data['owasp_top_10'], $obj->owaspTop10);
        $this->assertEquals(array($data['wasc'][0]), $obj->wasc);
        $this->assertEquals(array($data['tags'][0]), $obj->tags);
        $this->assertEquals(
            '[' . $data['references'][0]['title'] . '](' . $data['references'][0]['url'] . ')',
            (string) $obj->references[0]
        );
    }

    /**
     * @param string $expected
     * @param array  $data
     *
     * @dataProvider dataToString
     * @group unit
     */
    public function testToString($expected, $data)
    {
        $obj = new Vulnerability($data);

        $this->assertEquals($expected, (string) $obj);
    }

    /**
     * @return array
     */
    public function dataToString()
    {
        return array(
            array(
                'Vulnerability for MyTitle - 1',
                array(
                    'id' => 1,
                    'title' => 'MyTitle',
                    'description' => array('Description'),
                    'severity' => 'low',
                    'fix' => array(
                        'effort' => 'Effort',
                        'guidance' => array('Guidance'),
                    ),
                )
            ),
        );
    }
}
