<?php
/**
 * VulnDB PHP SDK
 *
 * @copyright 2015 Anthon Pang
 *
 * @license http://opensource.org/licenses/MIT MIT
 */

namespace VulnDb\Service;

use GitWrapper\GitWrapper;
use Symfony\Component\Finder\Finder;
use VulnDb\Vulnerability;

/**
 * Vulnerability Database Service
 *
 * {@internal
 *     Use this service to interact with the entire database.
 * }}
 *
 * @author Anthon Pang <anthon.pang@gmail.com>
 */
class VulnerabilityDatabaseService
{
    const REPOSITORY_URL = 'https://github.com/vulndb/data.git';

    /**
     * @var array
     */
    private $vulnerabilities;

    /**
     * Update the vulnerability database (returning any output from the git wrapper)
     *
     * @return string
     *
     * @throws \Exception
     */
    public function updateDb()
    {
        $wrapper  = new GitWrapper();
        $dataPath = __DIR__ . '/../../data';

        if (! file_exists($dataPath . '/.git')) {
            $git = $wrapper->clone(self::REPOSITORY_URL, $dataPath);

            return $git->getOutput();
        }

        $output = $wrapper->git('pull', $dataPath);

        if (strpos($output, 'Already up-to-date.') !== false) {
            $this->vulnerabilities = null;
        }

        return $output;
    }

    /**
     * Load entire vulnerability database
     */
    public function loadDb()
    {
        if ($this->vulnerabilities) {
            return;
        }

        $jsonDataPath = __DIR__ . '/../../data/db';

        $finder = new Finder();
        $finder->files()->in($jsonDataPath)->name('*.json');

        foreach ($finder as $file) {
            $data = json_decode(file_get_contents($file), true);

            if ($data) {
                $data['filename'] = basename($file);

                $this->vulnerabilities[$data['id']] = $data;
            }
        }
    }

    /**
     * Get all vulnerability IDs
     *
     * @return array
     */
    public function getAllIds()
    {
        $jsonDataPath = __DIR__ . '/../../data/db';

        $finder = new Finder();
        $finder->files()->in($jsonDataPath)->name('*.json');

        $fileList = array();

        foreach ($finder as $file) {
            if (preg_match('/^([0-9]+)-.*/', basename($file), $matches)) {
                $fileList[] = $matches[1];
            }
        }

        return $fileList;
    }

    /**
     * Fetch vulnerability by its ID
     *
     * @param integer $id
     *
     * @return \VulnDb\Vulnerability
     */
    public function getById($id)
    {
        $this->loadDb();

        if (! isset($this->vulnerabilities[$id])) {
            return;
        }

        return new Vulnerability($this->vulnerabilities[$id]);
    }

    /**
     * Filter vulnerabilities by severity
     *
     * @param string $severity
     *
     * @return array
     */
    public function filterBySeverity($severity)
    {
        $this->loadDb();

        $vulnerabilityList = array();

        foreach ($this->vulnerabilities as $data) {
            if ($severity === $data['severity']) {
                $vulnerabilityList[] = new Vulnerability($data);
            }
        }

        return $vulnerabilityList;
    }

    /**
     * Filter vulnerabilities by tag
     *
     * @param string $tag
     *
     * @return array
     */
    public function filterByTag($tag)
    {
        $this->loadDb();

        $vulnerabilityList = array();

        foreach ($this->vulnerabilities as $data) {
            if (isset($data['tags']) && in_array($tag, $data['tags'])) {
                $vulnerabilityList[] = new Vulnerability($data);
            }
        }

        return $vulnerabilityList;
    }
}
